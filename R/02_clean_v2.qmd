---
title: "02_clean_v2"
format: html
editor: visual
---

## Library load

Loading libraries which will be used for the data wrangling

```{r}
rm(list=ls())
library("tidyverse")
library("purrr")
library("broom")
library("readr")
library("here")
```

## Data load

Loading the tsv file from the data folder.

```{r}
data <- read_tsv(here("data/01_data_load.tsv"))
```

## View data

Viewing the data to get the number of observations and variables in the raw data.

```{r}
# View the first few observations and variables

data |>
  dim_desc()


```

The three rules for making a data set tidy must be satisfied. Each variable must have its own column, each observation have its own row, and each value have its own cell.

It can be observed, from viewing the data, that multiple of the variables contain more than one value. Therefore, each value does not have its own cell which means the data is not tidy.

To make sure the data is tidy these values are separated into different columns/variables.

## Data wrangling

The variable "Uses" contains the many different ways the drug is being used by the specific patient.

```{r}
data |>
  select(Uses) |>
  head()
```

It can be observed that one observation can contain multiple different ways the drug is utilized. Therefore this variable is split into different columns of applications, in order for each column to only contain one type of usage.

```{r}


#We start by remocing the patterns to isolate symtoms.
clean_data <- data |> 
  mutate(Uses = str_replace_all(Uses,
                                "(?<!\\s)Treatment of",
                                "")) |> 
  mutate(Uses = str_replace_all(Uses,
                                "(?<!\\s)Prevention of",
                                "")) |> 
  mutate(Uses = str_replace_all(Uses,
                                "(?<!\\s)Treatment and prevention of",
                                "")) |> 
  mutate(Uses = str_replace_all(Uses,
                                "\\(.*?\\)", 
                                ""))
 
clean_data |> 
  select(Uses) |>
  distinct() |>
  print()
  


```

```{r}
clean_data <- clean_data |> 
  mutate(Uses = str_replace_all(Uses,
                                "[./-]",
                                "")) |> 
  mutate(Uses = str_replace_all(Uses,"HIV",
                                "Hiv")) |> 
  mutate(Uses = str_replace_all(Uses, "\\b[A-Z]+\\b", ~str_to_lower(.)))
  
 

```

```{r}


clean_data <- clean_data |>
  separate(
    Uses,
    into = str_c("Application_",seq(1,10)), #spli
    sep = "(?=[A-Z])", # Splits if the word starts with capital letter
    extra = "merge", # Additional content is merged into the last column 
    fill = "right" # Fills empty columns with NA
  )


```

To ensure the right amount of application variables are made in the code above, we check if there is anything in the specific column other than NAs.\
It isn't until application number 10 that there are only NAs. Therefore 9 application columns are made.

```{r}
clean_data |>
  summarize(non_na_count = sum(!is.na(`Application_9`))) |> # Counts non-NA columns
  pull(non_na_count) # Extract calculated count
clean_data |>
  summarize(non_na_count = sum(!is.na(`Application_10`))) |> # Counts non-NA columns
  pull(non_na_count) # Extract calculated count
```

It is interesting to investigate how many unique usages there are for the drugs. This is done in the code below where all application variables are put into one variable called "Observations", all duplicate observations are removed by using the "distinct" command, and all NAs are excluded using "filter".

(this code should probably be moved to augment og describe doc)

```{r}
unique_observations <- clean_data |>
  select(str_c("Application_",seq(1,10))) |>
  pivot_longer(cols = everything(), values_to = "Observations") |> 
  filter(!is.na(Observations)) |> 
  print()
```

```{r}
unique_observations <- clean_data |>
  select(str_c("Application_",seq(1,10))) |>
  pivot_longer(cols = everything(), values_to = "Observations") |>
  distinct(Observations) |>
  filter(!is.na(Observations))

print(unique_observations)
```

There are 680 unique usages for the drugs.\

Furthermore, the variable "Medicine Name" also contains multiple values in each cell. It carries information about both the name of the drug, the amount of drug administrated, and the administration route. This information should be split into separate columns.

**Create code section where we can show this**

Because there are different routes of administration the units for the dose are also different. For instance tablets are given in mg, a cream or a gel in percentages, Syrups in ml, a Penfill is given in IU (biological activity) etc.

Information about the dose is also available in the variable "Composition", and in this variable it is more detailed. In the "Medicine Name" variable it isn't always explained which unit, the number is given in. Because information about the dose can be found in both variables, but the unit is unsure in "Medicine Name", information about the dose is just removed and discarded from this variable.

Amalie

```{r}
clean_data1 <- data |>
  extract(
    `Medicine Name`, 
    into = c("Medicine Name", "Administration route"),
    regex = "^([^ ]+)[ ]?(.*)$", 
    remove = FALSE # Retains original column if needed
  ) |>
  extract(`Administration route`,
          into = c("Dose","Administration route"),
          regex = "^([^ ]+)[ ]?(.*)$",
          remove = FALSE)


```

Note:

\^(\[\^ \]+): Captures the first word up to space,

(.\*)\$: Captures the rest of the string up to space

Got stuck on this.\
Tried to split by the first number occuring below instead:

```{r}
clean_data2 <- data |>
  extract(
    `Medicine Name`, 
    into = c("Medicine Name", "Rest"),
    regex = "^([^0-9]+)(.*)$",  # Splits at the first number
    remove = FALSE
  )
```

The "Composition" variable contains information about both the different drugs the overall medication is made of, and the amount of each different drug. This should also be put into different variables.

Firstly this variable is split into a column per different drug type, by separating by the +'s. Secondly each of these new variables are split into a "Drug name" and a "Drug dose" column.

```{r}
clean_data3 <- data |>
  separate(
    `Composition`, 
    into = c("Drug name 1", "Drug name 2", "Drug name 3", "Drug name 4", "Drug name 5", "Drug name 6", "Drug name 7", "Drug name 8", "Drug name 9"), 
    sep = " \\+ ",       # Split at " + " (space plus space)
    fill = "right",      # Ensures rows without a "+" will have NA in "Drug name 2"
    extra = "merge"      # In case there are multiple "+" signs, keep the rest in "Drug name 2"
  )
```

Again, checking when there is a column with only NAs, so there shouldn't be made any more Drug name variables:

```{r}
clean_data3 |>
  summarize(non_na_count = sum(!is.na(`Drug name 9`))) |> # Counts non-NA columns
  pull(non_na_count) # Extract calculated count
```

At the 10th type of drug there is no non-NA values.

Then for splitting name of the specific drug and amount of drug, we see that there is always brackets around the drug amount, therefore we can split by the first "(".

(blev ikke helt færdig med det her, de har nogle mærkelige navne)

```{r}
clean_data4 <- clean_data3 |>
  pivot_longer(
    cols = starts_with("Drug name"),         
    names_to = "Drug Column",               
    values_to = "Drug Info"                 
  ) |>
  separate(
    `Drug Info`, 
    into = c("Drug Name", "Drug dose"),  
    sep = " \\(",  
    extra = "merge", 
    fill = "right"                        
  ) |>
  pivot_wider(
    names_from = `Drug Column`,         
    values_from = c("Drug Name", "Drug dose")
  )

```

.
