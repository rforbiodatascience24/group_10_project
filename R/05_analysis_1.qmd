---
title: "05_analysis_1"
format: html
editor: visual
---

## Quarto

```{r}
library(tidyverse)
```

Based on these findings the reason behind the excellent and poor reviews for these drugs can be found. This can be done by looking into the number and type of side effects, as it is probable that this will have an influence on the reviews.

```{r}

# Loading the clean data tsv file 
cancer_data <- read_tsv(here('data/03_dat_aug.tsv'))

```

-   hvor mange gange går applications igen (plot)

```{r}

ggplot(cancer_data,
       aes(x = Count_Side_Effects,
           y = `Review_%`,
           color = Review_level)) +
  geom_point() +
  labs(x = "Count of Side Effects", y = "Review Percentage", title = "Side Effects vs Review Percentage by the Review Level") +
  
  theme_minimal() +
  facet_wrap(~ Review_level)+
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank())







```

```{r}

ggplot(cancer_data,
       aes(x = Administration_type,
           y = `Review_%`,
           color = Administration_type)) +
  geom_point() +
  labs(x = "Count of Side Effects", y = "Review Percentage", title = "Side Effects vs Review Percentage by the Review Level") +
  
  theme_minimal() +
  facet_wrap(~ Review_level)+
  theme(panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
        panel.grid.minor.x = element_blank(),  # Remove minor vertical grid lines
        axis.text.x = element_text(angle = 45, hjust = 1))


```

theme(panel.grid.major.x = element_blank(),

panel.grid.minor.x = element_blank(),

axis.text.x = element_text(angle = 45, hjust = 1)) \# Rotate x-axis labels 45

```{r}
ggplot(cancer_data, aes(x = Administration_type, y = `Review_%`, fill = Review_level)) +
  geom_boxplot(alpha=0.7) +  # Create a violin plot for each Review_level
  labs(x = "Administration Type", y = "Review Percentage", title = "Review Percentage by Administration Type and Review Level") +
  theme_minimal() +  # Apply a minimal theme
  facet_wrap(~ Review_level) +  # Create separate plots for each Review_level
  theme(panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
        panel.grid.minor.x = element_blank(),  # Remove minor vertical grid lines
        axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
# Step 1: Filter out levels with fewer than 10 observations
cancer_data_filtered <- cancer_data %>%
  group_by(Review_level) %>%
  filter(n() > 1000) %>%  # Keep only groups with more than 10 observations
  ungroup()  # Ungroup to avoid any group-specific operations in the plot

# Step 2: Create the plot
ggplot(cancer_data_filtered, aes(x = Administration_type, y = `Review_%`, fill = Review_level)) +
  geom_boxplot(alpha = 0.6) +  # Create a boxplot for each Review_level
  labs(x = "Administration Type", y = "Review Percentage", title = "Review Percentage by Administration Type and Review Level") +
  theme_minimal() +  # Apply a minimal theme
  facet_wrap(~ Review_level) +  # Create separate plots for each Review_level
  theme(
    panel.grid.major.x = element_blank(),  # Remove major vertical grid lines
    panel.grid.minor.x = element_blank(),  # Remove minor vertical grid lines
    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for readability
  )
```

```{r}

# Step 1: Get the top 6 manufacturers with the most products
top_manufacturers <- cancer_data %>%
  group_by(Manufacturer) %>%  # Group by manufacturer
  summarise(product_count = n()) %>%  # Count the number of products for each manufacturer
  arrange(desc(product_count)) %>%  # Sort by the product count in descending order
  slice_head(n = 6)  # Select the top 6 manufacturers

# Step 2: Filter the original dataset to include only the top 6 manufacturers
cancer_data_selected <- cancer_data %>%
  filter(Manufacturer %in% top_manufacturers$Manufacturer)
# Create the plot
ggplot(cancer_data_selected, aes(x = Classification_Review, fill = Classification_Review)) +
  geom_bar(stat = "count", show.legend = FALSE) + 
  facet_wrap(~ Manufacturer) + 
  labs(x = "Classification Review", y = "Count", title = "Counts of Classification Reviews by Manufacturer") +
  theme_minimal() +  # Apply a minimal theme
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability







```

```{r}

library(dplyr)
library(ggplot2)

# Step 1: Get the top 6 manufacturers with the most products
top_API <- cancer_data %>%
  filter(!is.na(API_name)) %>%  # Exclude rows where API_name is NA
  group_by(API_name) %>%  # Group by API_name
  summarise(API_count = n()) %>%  # Count the number of products for each API
  arrange(desc(API_count)) %>%  # Sort by product count in descending order
  slice_head(n = 6)  # Select the top 6 manufacturers

# Step 2: Filter the original dataset to include only the top 6 manufacturers and exclude NAs
cancer_data_selected <- cancer_data %>%
  filter(API_name %in% top_API$API_name & !is.na(API_name))  # Exclude NA API names

# Step 3: Reorder Classification_Review factor to ensure "Average" is in the middle
cancer_data_selected <- cancer_data_selected %>%
  mutate(Classification_Review = factor(Classification_Review, 
                                       levels = c("Poor", "Average", "Excellent")))

# Step 4: Create the plot
ggplot(cancer_data_selected, aes(x = Classification_Review, fill = Classification_Review)) +
  geom_bar(stat = "count", show.legend = FALSE) + 
  facet_wrap(~ API_name) +  # Create a facet for each API_name
  labs(x = "Classification Review", y = "Count", title = "Counts of Classification Reviews by Manufacturer") +
  theme_minimal() +  # Apply a minimal theme
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability


```

### Bonus

-   hvor mange gange kan et bestemt drug f.eks. behandle kræft (eller anden sygdom) - her kan application bruges
