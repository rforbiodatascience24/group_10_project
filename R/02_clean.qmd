---
title: "02_clean_v2"
format: html
editor: visual
---

## Loading Libraries

Loading libraries which will be used for the data wrangling

```{r}
rm(list=ls())
library("tidyverse")
library("purrr")
library("broom")
library("readr")
library("here")
```

## Loading Data

Loading the tsv file from the data folder.

```{r}
data <- read_tsv(here("data/01_dat_load.tsv"))
```

## Inspect Data

The three rules for making a data set tidy must be satisfied. Each variable must have its own column, each observation have its own row, and each value have its own cell.

```{r}
View(data)
```

It can be observed, from viewing the data, that multiple of the variables contain more than one value. Therefore, each value does not have its own cell which means the data is not tidy.

To make sure the data is tidy these values are separated into different variables.

## Data Wrangling

The variable "Uses" contains the many different diseases which the drug is being used for.

```{r}
data |>
  select(Uses) |>
  View()
```

It can be seen that one observation can contain multiple different ways the drug is utilized. Therefore this variable is split into different columns of applications, in order for each column to only contain one type of usage. First is "Treatment of", "Prevention of", "Treatment and prevention of" and anything in parenthesis removed.

```{r}
# Removing "Treatment of", "Prevention of", "Treatment and prevention of" in each row and anything in parenthensis to isolate types of usage.

clean_data <- data |>
  mutate(Uses = str_replace_all(Uses,
                                "(?<!\\s)Treatment of",
                                "")) |> 
  mutate(Uses = str_replace_all(Uses,
                                "(?<!\\s)Prevention of",
                                "")) |> 
  mutate(Uses = str_replace_all(Uses,
                                "(?<!\\s)Treatment and prevention of",
                                "")) |> 
  
  # Removing all information in the parenthensis.
  mutate(Uses = str_replace_all(Uses,
                                "\\(.*?\\)", 
                                ""))

# Printing only unique, partially cleaned "Uses" data
clean_data |> 
  select(Uses) |>
  distinct() |>
  print()
```

As can be seen from the "Uses" of only unique observations, the data is not yet tidy. We would like to separate the usage types based on splitting at every encounter with capital letters. However, examples of abbreviations such as "HIV" is present in the data set and does not result in correct splitting. Therefore, the data is cleaned further by removing periods, backslash, and hyphens, as they do not convey any more information.

```{r}
clean_data <- clean_data |> 
  
  # Period, backslash, and hyphen are removed.
  mutate(Uses = str_replace_all(Uses,
                                "[./-]",
                                "")) |> 
  
  # "HIV" is converted to only have the first letter as a capital letter.
  mutate(Uses = str_replace_all(Uses,
                                "HIV",
                                "Hiv")) |> 
  
  # Every word consisting of only capital letters are converted to lower case e.g. "Vitamin B" becomes "Vitamin b"
  mutate(Uses = str_replace_all(Uses, 
                                "\\b[A-Z]+\\b", 
                                ~str_to_lower(.)))
```

The data is now ready to be split into applications.

## Amalie

```{r}
clean_data <- clean_data |>
  
  # Splitting the string on capital letter (not first letter as this would be empty)
  mutate(Application = map(Uses, ~ {
    
    # Starts by removing the leading whitespaces (if any).
    trimmed_string <- str_trim(.x)
    
    # Defines the first character to save the first apllication for a correct split
    
    first_char <- str_sub(trimmed_string, 1, 1)
    
    # Define the rest of the string (from the second character onwards)
    rest <- str_sub(trimmed_string, 2,str_length(trimmed_string))
  
    
    # Split the rest on capital letters
    split_rest <- str_split(rest, pattern = "(?=[A-Z])") [[1]]
    
    # Add the first character back to the first element and keep the rest
    c(str_c(first_char, split_rest[1]), split_rest[-1])
  }))  |>
  
  # Unnest the list column and unnest them into multiple columns
  unnest_wider(Application, names_sep = "_")

clean_data <- clean_data |>
  select(-Uses)



```

To ensure the right amount of application variables are made in the code above, we check if there is anything in the specific column other than NAs.

It isn't until application number 10 that there are only NAs. Therefore 9 application columns are sufficient.

It is interesting to investigate how many unique usages there are for the drugs. This is done in the code below where all application variables are put into one variable called "Observations". All duplicate observations are removed by using the "distinct" command, and all NAs are excluded using "filter".

(this code should probably be moved to augment og describe doc)

```{r}

observations_count <- clean_data |>
  select(str_c("Application_",
               seq(1,8))) |>
  pivot_longer(cols = everything(), 
               values_to = "Observations") |> 
  filter(!is.na(Observations)) |> 
  print()
```

Here we see that there are a total of 18,672 observations if the observations are not collected into unique types of usage. This is done in the following code by the use of distinct:

```{r}

# Print the unique observations

unique_observations <- observations_count |> 
  distinct(Observations) |> 
  filter(!is.na(Observations))

print(unique_observations)
  
```

There are a total of 628 unique usages for the drugs.\

Furthermore, the variable "Medicine Name" also contains multiple values in each cell. It carries information about both the name of the drug, the amount of drug administrated, and the administration route. This information should be split into separate columns.

```{r}

# Printing the variabe "Medicine Name"
clean_data |>
  select('Medicine Name') 

```

Because there are different routes of administration the units for the dose are also different. For instance tablets are given in mg, a cream or a gel in percentages, Syrups in ml, a Penfill is given in IU (biological activity) etc.

Information about the dose is also available in the variable "Composition", and in this variable it is more detailed. In the "Medicine Name" variable it isn't always explained which unit, the number is given in. Because information about the dose can be found in both variables, but the unit is unsure in "Medicine Name", information about the dose is just removed and discarded from this variable.

```{r}
clean_data <- clean_data |>

  # Splits on "+" charater.
  mutate(API = str_split(Composition, pattern = "\\+")) |>

  # For each API column make a new column for each element and make the new name seqential after a "_"
  unnest_wider(API, names_sep = "_")

# Delete the row "Composition" that has now been unnested to multiple variables

clean_data <- clean_data |>
  select(-Composition)

```

```{r}
clean_data <- clean_data |> 
  mutate(
    # Extract drug name (everything before the first digit in the string)
    across(starts_with("API"),
           ~ str_extract(.x, "^[a-zA-Z\\s]+"),
           .names = "name_{.col}"),
    
    # Takes the first digit and all connecting digits (including decimal numebers) until other than digit
    across(starts_with("API"),
           ~ as.numeric(str_extract(.x, "\\d+\\.?\\d*")),
           .names = "amount_{.col}"),
    
    # Extracts the location of the digit that was saved as amout_API. Hereafter adding the length of that digit, to find startlocation of the rest of the string, which is saved as unit
    
    across(starts_with("API"), 
           
           ~ str_sub(.x, 
                     start = str_locate(.x, "\\(")[, 1] + str_length(str_extract(.x, "\\d+\\.?\\d*")) + 1, 
                     end = str_locate(.x, "\\)")[, 1] - 1), 
           .names = "unit_{.col}"))

clean_data <- clean_data |>
  select(-starts_with("API_"))



```

In the Medicine Name variable information about the type of administration for the specific drug is given. This information should be separated into its own variable called Administration_type. There is no apparent pattern in the Medicine Name variable in terms of application type and how to distinguish this from the other information in Medicine Name. Therefore, a more manual approach is taken where the raw data is analyzed for different administration types, where the name, of each type found, is added to a vector.\
A search is done for the words in the vector and if a word appears in Medicine Name it is added to the new variable Administration_type.

```{r}

# List of administration types based on the first 333 rows in "Medicin Name" column.
types <- c("Injection", 
                 "Tablet", 
                 "Syrup", 
                 "Cream", 
                 "Oral Suspension", 
                 "Capsule", 
                 "Eye Drop", 
                 "Liquid", 
                 "Suspension", 
                 "Inhaler", 
                 "Gel", 
                 "Drops", 
                 "Lozenges", 
                 "Eye/Ear Drops", 
                 "Expectorant", 
                 "Nasal Spray", 
                 "Respules", 
                 "Eye Ointment", 
                 "Soap", 
                 "Penfill", 
                 "Scalp Solution", 
                 "Respirator Solution", 
                 "Cartridge", 
                 "Eye Drops",
                 "Ophthalmic Solution", 
                 "Nail Lacquer", 
                 "Infusion", 
                 "Drop", 
                 "Readymix", 
                 "Oral Solution")


# Creating Administration_type variable. If a type from the type list matches with Medicine Name, matching type is inserted under Administration_type.
clean_data <- clean_data |>
  mutate(Administration_type = str_extract(`Medicine Name`,
                                           paste(types, 
                                                 collapse = "|")
                                           ) |>
  # N/As are replaced with "Other".
  replace_na("Other"))


# Filtering the observations containing "Other" in administration type.
clean_data |>
  select(`Medicine Name`, Administration_type) |>
  filter(str_detect(Administration_type, "Other")) |>
  print()

```

To make sure as many administration types as possible are added, the NAs are investigated to add further, missed types to a new vector. In the end there were 336 observations left which were NAs, these different administration types were changed to "Other".

```{r}

# Adding more administration types from those looking at the data with the string "Other".
updated_types <- c("Solution", 
                   "Lotion", 
                   "solution", 
                   "Vaccine", 
                   "gel", 
                   "Inhalation", 
                   "Shampoo", 
                   "tablet", 
                   "Ointment", 
                   "Transhaler", 
                   "Powder", 
                   "Spray")


# Second iteration of creating Administration_type as more types have been added to the list.
clean_data <- clean_data |>
  mutate(Administration_type = str_extract(`Medicine Name`,
                                           paste(c(types,
                                                   updated_types), 
                                           collapse = "|")
                                           ) |>
  # N/As are replaced with "Other".
  replace_na("Other"))


# Filtering the observations containing "Other" in administration type to see how many have not been types have not been decided.
clean_data |>
  select(`Medicine Name`, Administration_type) |>
  filter(str_detect(Administration_type, "Other")) |>
  print()

```

The last 336 administration types are roughly unique administration types appearing only ones or a few times. Therefore, to avoid having very small categories these are grouped into others.

### Splitting side effects into columns for each, by captial letter

All the side effects from the various medicines are collected in a single variable called 'Side_effects.' These are split into separate variables by dividing the text at capital letters and words that only consist of capital letters are changed to lower case, so "Abnormal ACG" becomes "Abnormal acg"

```{r}
clean_data <- clean_data |> 
  
# Every word that consists of multiple capital letters are converted to lower case eg. "Anormal ACG" becomes "Abnormal acg"
  mutate(Side_effects = str_replace_all(Side_effects, 
                                "\\b[A-Z]+\\b", 
                                ~str_to_lower(.)))

```

```{r}
clean_data <- clean_data |>
  
  # Split the string on capital letters, skipping the first character
  mutate(Side_Effects = map(Side_effects, ~ {
    

    # Defining first character and saving for adding later
    
    first_char <- str_sub(.x, 1, 1)
    
    # Defining the rest of the string which we now can split on
    rest <- substring(.x, 2)
    
    # Splitting on substring with removed first captial letter to avoid empty first column
    split_rest <- str_split(rest, pattern = "(?=[A-Z])")[[1]]
    
    # And adding the first character back for the first Side-Effects column for each row 
    c(paste0(first_char, split_rest[1]), split_rest[-1])
  }))  |>
  
  # Unnest the list column into multiple columns
  unnest_wider(Side_Effects, names_sep = "_")

clean_data <- clean_data |>
  select(-`Side_effects`)
```

To ensure that the side effects can be factorized and compared are trailing spaces removed

```{r}
# Removes whitespaces from the end of the data string.
clean_data <- clean_data |>
  mutate(across(starts_with("Side_Effects_"),
                ~ str_trim(.x, side = "right")))
```

```{r}
# Removing columns we do not need anymore.

clean_data <- clean_data |>
  select(-`Image URL`)
```
