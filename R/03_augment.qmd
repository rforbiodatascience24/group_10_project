---
title: "03_augment"
format: html
editor: visual
---

## Loading libraries and data file

### Loading libraries

Loading the relevant libraries.

```{r}
rm(list=ls())
library("tidyverse")
library("dplyr")
library("readr")
```

### Loading cleaned data file

Loading the cleaned data file from the data folder as a .tsv file.

```{r}
#| message: false

# Loading the clean data tsv file 
clean_data <- read_tsv(here('data/02_dat_clean.tsv'))

```

### Subsetting data into data related to cancer 

```{r}
# cancer_data <- clean_data |>
#   filter(str_detect(starts_with("Application"), regex("cancer", ignore_case = TRUE)))

cancer_data <- clean_data |>
  filter(if_any(starts_with("Application"), ~ str_detect(., regex("cancer", ignore_case = TRUE))))
```

## Augmentation of data

#### Augmenting data by adding count variables for 'Side_Effects', 'API' and 'Application'.

It is of interest how many side effects each person has experienced for the different drugs, in order to investigate whether some drugs might carry a higher amount than others, as well as certain combination of drugs. Therefore, a new variables is made, counting the amount of side effects and API for each observation. Furthermore, the count of application is made into a new variables, as it is of interest how many application each drug carry.

```{r}

aug_clean_data <- cancer_data |>
  
  # Counting for each row, as nr. of side effects might differ
  rowwise() |>
  
  # mutating in order to make SE_count variable with sum of Column containing SE in         header as this refer to side effects listed for each row 
  mutate(Count_Side_Effects = sum(!is.na(c_across(contains("Side_Effects_")))), 
         Count_API = sum(!is.na(c_across(contains("name_API_")))),
         Count_Application = sum(!is.na(c_across(contains("Application_")))))


```

```{r}

  
```

## Transforming the data into long format

```{r}
pivot_longer_1 <- aug_clean_data |>
  pivot_longer(
    cols = starts_with("Application_"),
    names_to = "Application_number",
    values_to = "Application_type"
  ) 

```

```{r}
pivot_longer_2 <- pivot_longer_1 |>
  pivot_longer(
    cols = starts_with("name_API_"),
    names_to = "API_name_number",
    values_to = "API_name"
  )
```

```{r}
pivot_longer_3 <- pivot_longer_2 |>
  pivot_longer(
    cols = starts_with("amount_API_"),
    names_to = "API_amount_number",
    values_to = "API_amount"
  )
```

```{r}
pivot_longer_4 <- pivot_longer_3 |>
  pivot_longer(
    cols = starts_with("unit_API_"),
    names_to = "API_unit_number",
    values_to = "API_unit"
  )

```

```{r}
clean_data_long <- pivot_longer_4 |>
  pivot_longer(
    cols = starts_with("Side_Effects_"),
    names_to = "Side_Effect_number",
    values_to = "Side_Effect_type"
  )


```

### Extracting only unique rows in data 

```{r}

unique_long_clean_data <- clean_data_long |>
  distinct(across(-c(Application_number, API_name_number, API_amount_number, API_unit_number, Side_Effect_number)), .keep_all = TRUE)


```

## Saving augmented cleaned data .tsv

Saving the cleaned augmented data as a .tsv in the data folder

```{r}
# Defining the directory which the file should be saved to} 
dir_save <- here("data")
# Defining the save path with correct name and directory
save_path <- file.path(dir_save, "02_dat_clean.tsv")

# Save the augmented data as a TSV file
write_tsv(unique_long_clean_data, save_path)
```

## 
